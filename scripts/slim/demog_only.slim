//Slim script to run a chromosomal region containing 33 genes, each comprised of 5 300bp exons, 4 100bp introns, and separated by a 1068bp //intergenic region.
//Demographic changes are instantaneous at a fixed time of change.
//How to run:
//slim -d d_seed=1 -d d_scaling_factor=200 -d d_regionLength=1000000 -d d_Nanc=1000000 -d d_Ncur=2000000 -d "rmap='fixed'" -d "mmap='fixed'" -d "d_folder='/home/vivak/rr_mu_demography_DFE/'" -d "d_simID='1Mb'" -d "d_repID='1'" general.slim

initialize()
{
    setSeed(d_seed);
    
    //define constants:
    defineConstant("scale", d_scaling_factor);
    defineConstant("regionLength", d_regionLength);
    defineConstant("Na", asInteger(round(d_Nanc/scale)));
    defineConstant("Nc", asInteger(round(d_Ncur/scale)));
    defineConstant("gen_burnin", 16 * Na); //16N burnin (after which instantaneous size change occurs
    defineConstant("gen_stop", 20 * Na); //4N of further evolution before sampling


	//MUTATION RATE//
	//fixed recombination rate (keightley et al. 2014 average)
	if (mmap=='fixed')
		{
		mu = 2.8e-9 * scale;
		initializeMutationRate(mu);
		}
	//variable rate (from input file)
	else
		{
		lines = readFile(mmap);
	   mu = NULL;
	   coords = NULL;
	   for (line in lines)
	   	{
	      components = strsplit(line,"\t");
	      coords = c(coords, asInteger(components[0]));
	      mu = c(mu, asFloat(components[1]));
	      }
	   mu = mu * scale;
	   coords = c(coords[1:(size(coords)-1)] - 1, 1000000);
	   initializeMutationRate(mu, coords);
	   }
    
    // mutation types: 
    initializeMutationType("m1", 0.5, "f", 0); //effectively neutral
    

    // g1 genomic element type: uses m1 for all neutral mutations
    initializeGenomicElementType("g1", m1, 1.0); //intergenic
    
    initializeGenomicElement(g1, 1, regionLength);
 
    
	//RECOMBINATION RATE//
	//fixed recombination rate (Comeron et al. 2012 average) (halved to get sex-averaged rate).
	if (rmap=='fixed')
		{
		rr = (2.32/2) * scale * 1e-8;
		initializeRecombinationRate(rr);
		}
	//variable rate (from input file - already adjusted for sex-average rate)
	else
		{
		lines = readFile(rmap);
	   rr = NULL;
	   coords = NULL;
	   for (line in lines)
	   	{
	      components = strsplit(line,"\t");
	      coords = c(coords, asInteger(components[0]));
	      rr = c(rr, asFloat(components[1]));
	      }
	   rr = rr * scale * 1e-8;
	   coords = c(coords[1:(size(coords)-1)] - 1, 1000000);
	   initializeRecombinationRate(rr, coords);
	   }
}

// part 1 (burn-in for gen_burnin (=16Na) generations): create a population of Na individuals
1 {
    sim.addSubpop("p1", Na);
    //Set variables s1 and s2 for gen_burnin and gen_stop
    sim.rescheduleScriptBlock(s1, start=gen_burnin, end=gen_burnin);
    sim.rescheduleScriptBlock(s2, start=gen_stop, end=gen_stop);
}
// part 2: instantaneous population size change: reaches size N_cur
s1 late(){
    newSize = Nc;
    p1.setSubpopulationSize(asInteger(newSize));
}
//print genotypes of 100 individuals selected randomly without replacement:
//gen_stop = gen_burnin + time of change
s2 late() {
    p1.outputMSSample(100, F, "*", d_folder + "/" + d_simID + "_rep" + d_repID + ".ms", F);
    //print size of population to check
    print(p1.individualCount);

    //print all fixed mutations
    sim.outputFixedMutations(d_folder + "/" + d_simID + "_rep" + d_repID + ".fixed", append=F);
    sim.simulationFinished();
}
